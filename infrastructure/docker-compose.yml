version: "3.9"

services:
  redis:
    image: redis:7.4.0
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - redis_network
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  mongo1:
    image: mongo:7.0
    container_name: mongo1
    volumes:
      - mongo1_data:/data/db
    networks:
      - mongors_network
    ports:
      - "27017:27017"
    restart: always
    command: ["--replSet", "dbrs", "--bind_ip_all", "--port", "27017"]
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'dbrs',members:[{_id:0,host:'mongo1:27017',priority:1},{_id:1,host:'mongo2:27018',priority:0.5},{_id:2,host:'mongo3:27019',priority:0.5}]}) }" | mongosh --port 27017 --quiet
      interval: 5s
      timeout: 30s
      start_period: 0s
      retries: 30

  mongo2:
    image: mongo:7.0
    container_name: mongo2
    volumes:
      - mongo2_data:/data/db
    networks:
      - mongors_network
    ports:
      - "27018:27018"
    restart: always
    command: ["--replSet", "dbrs", "--bind_ip_all", "--port", "27018"]
    healthcheck:
      test: [ "CMD", "mongosh", "--host", "localhost", "--port", "27018", "--eval", "db.adminCommand('ping')" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

  mongo3:
    image: mongo:7.0
    container_name: mongo3  
    volumes:
      - mongo3_data:/data/db
    networks:
      - mongors_network
    ports:
      - "27019:27019"
    restart: always
    command: ["--replSet", "dbrs", "--bind_ip_all", "--port", "27019"]
    healthcheck:
      test: [ "CMD", "mongosh", "--host", "localhost", "--port", "27019", "--eval", "db.adminCommand('ping')" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    
  consul:
    image: consul:1.15.4
    container_name: consul
    restart: unless-stopped
    ports:
      - "8500:8500"
    volumes:
      - consul_data:/consul/data
    networks:
      - consul_network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8500/v1/status/leader" ]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  fabio:
    image: fabiolb/fabio:1.6.4
    container_name: fabio
    restart: unless-stopped
    environment:
      - FABIO_REGISTRY_CONSUL_ADDR=consul:8500
    ports:
      - "9998:9998"
      - "9999:9999"
    networks:
      - fabio_network
      - consul_network
    entrypoint: /bin/sh -c "apk update && apk add --no-cache curl && exec /usr/bin/fabio -proxy.addr :9999 -ui.addr :9998"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9998/health" ]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 15s

volumes:
  redis_data:
    driver: local
  mongo1_data:
    driver: local
  mongo2_data:
    driver: local
  mongo3_data:
    driver: local
  consul_data:
    driver: local

networks:
  redis_network:
    driver: bridge
  mongors_network:
    driver: bridge
  fabio_network:
    driver: bridge
  consul_network:
    driver: bridge